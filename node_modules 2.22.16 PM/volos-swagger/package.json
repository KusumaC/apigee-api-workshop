{
  "name": "volos-swagger",
  "version": "0.1.0",
  "license": "MIT",
  "description": "Middleware for bridging swagger (via swagger-tools) and volos",
  "homepage": "https://github.com/apigee/volos",
  "keywords": [
    "apigee",
    "a127",
    "swagger"
  ],
  "author": {
    "name": "Scott Ganyo",
    "email": "sganyo@apigee.com"
  },
  "main": "lib/connect-middleware.js",
  "dependencies": {
    "debug": "1.0.x",
    "underscore": "1.6.x"
  },
  "devDependencies": {
    "mocha": "1.19.x",
    "should": "3.1.x",
    "express": "3.4.x",
    "swagger-tools": "",
    "volos-cache-memory": "",
    "volos-quota-memory": "",
    "volos-oauth-redis": ""
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/apigee/volos.git"
  },
  "readme": "# volos-swagger\n\nThis module adds support for driving Volos middleware functions entirely though configuration and the Apigee 127\n [Swagger Tools](https://www.npmjs.org/package/swagger-tools) swagger-metadata middleware.\n\nAll Volos modules including Cache, Quota, and OAuth may be configured and tied to Swagger operations using\n configuration similar to the code that you would use to programmatically drive the Volos middleware. \n\nOnce you have set up your swagger-tools middleware as documented [here](https://github.com/apigee-127/swagger-tools)\n(note: only the swagger-metadata middleware is necessary), just set up your configuration (see below) and simply add \nthe Volos Swagger Middleware into your connect middleware chain after swagger-metadata.  \n    \n    var VolosSwagger = require('volos-swagger');\n    var swaggerMiddleware = SwaggerMetadata(configuration); \n    app.use(swaggerMiddleware);\n\n## Configuration\n\nThe Volos Swagger Configuration is a Javascript Object with 3 keys:\n \n * resources\n * global\n * operations\n \nThe following sections discuss the format using this [example](test/support/volos.json) json file.  \n\nImportant: Be sure to include any referenced Volos modules in your package.json!   \n\n### Resources\n\nThe resources section defines how the modules that will be referenced in the other sections of this file (and the \nSwagger definition) will be instantiated and configured. The basic idea is that you simply define the array of \nparameters that would have been passed in to create the Volos module had you done it programmatically.\n \nFor example, [volos-cache-memory](../cache/memory/README.md) requires a name and a hash of options. If we want to create\nand use a cache named \"memCache\" that has a time-to-live (ttl) of 1000ms, we'd do so like this: \n\n    {\n      \"resources\": {\n        \"cache\": {\n          \"provider\": \"volos-cache-memory\",\n          \"options\": [\n            \"memCache\",\n            {\n              \"ttl\": 1000\n            }\n          ]\n        },\n\nNote: The key is \"cache\" for the definition. This is the name that will be used later to refer to this resource, not\n\"memCache\".\n\nSimilarly, we create a [volos-quota-memory](../quota/memory/README.md) (\"quota\") and \n[volos-oauth-redis](../oauth/redis/README.md) (\"oauth2\") reference in this example: \n\n        \"quota\": {\n          \"provider\": \"volos-quota-memory\",\n          \"options\": [\n            {\n              \"timeUnit\": \"minute\",\n              \"interval\": 1,\n              \"allow\": 2\n            }\n          ]\n        },\n        \"oauth2\": {\n          \"provider\": \"volos-oauth-redis\",\n          \"options\": [\n            {\n              \"encryptionKey\": \"This is the key to encrypt/decrypt stored credentials\"\n            }\n          ]\n        }\n      },\n\nNote: Unlike Cache and Quota, we will not reference the OAuth definition later in this file. Swagger 1.2 has direct \nsupport for declaring OAuth 2.0 authorizations, so we can rely on those annotations directly. On the other hand,\nSwagger 1.2 doesn't support Cache or Quota, so we will have to map these to Swagger operations as described in the\nOperations section below.\n      \n### Globals\n\nThe global section is where you would specify any of the Volos middleware you wish to apply across all your paths. For\nexample, if we wish to apply a quota and cache globally (as unlikely as that seems), we would list them in this section \nlike so: \n      \n      \"global\": [\n        {\n          \"quota\": [\n            {\n              \"identifier\": \"*\",\n              \"weight\": 1\n            }\n          ]\n        },\n        {\n          \"cache\": null\n        }\n      ],\n\nNote that the Quota is being applied using a static identifier: \"*\". Thus, this would allow only 2 calls per minute\nacross all endpoints. (Probably not very useful.) Had we not specified an identifier, it would have used the request URI \nas the key for the quota.\n\n'\"cache\": null' just means that we aren't passing any parameters in (and are thus using defaults) - so in this case,\n the cache will use the request URI as the cache key.\n\n### Operations\n\nThe operations section is where you would specify any of the Volos middleware you wish to apply on a per-operation\nbasis. This section (as opposed to global) is where you would generally define your middleware insertion points. For\nthese definitions, you must reference the Swagger operation \"nickname\" you have in your Swagger definition as your\nkeys. \n\nIn the example below, we have two Swagger operations, one with a nickname of \"cached\" and another nicknamed\n\"quota\". You can see that the \"cached\" operation will apply the \"cache\" resource we created in the resources section\nabove, while the \"quota\" operation will likewise be subject to the resource named \"quota\". In both of these cases,\nwe've allowed the request URI to be the key by default.\n\n      \n      \"operations\": {\n        \"cached\": [\n          {\n            \"cache\": null\n          }\n        ],\n        \"quota\": [\n          {\n            \"quota\": null\n          }\n        ]\n      }\n    }\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/apigee/volos/issues"
  },
  "_id": "volos-swagger@0.1.0",
  "_from": "volos-swagger@"
}
